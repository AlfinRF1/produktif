/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Member_Karyawan;

import Barang_karyawan.Barang_Karyawan_New;
import trjual_karyawan.TR_Jual_Karyawan;
import Barang_karyawan.Barang_Karyawan_New;
import halamanutama1.Dashboard_Karyawan;
import javax.swing.JOptionPane;
import login.Login_New;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;

/**
 *
 * @author LENOVO
 */
public class Member_Karyawan extends javax.swing.JFrame {
private Connection conn;
    private Statement stmt;
    private ResultSet rs;
    /**
     * Creates new form Member_Karyawan
     */
    public Member_Karyawan() {
        initComponents();
        this.setExtendedState(Member_Karyawan.MAXIMIZED_BOTH); 
     conn = koneksi.koneksiDB(); // Tambahkan baris ini
    loadmember();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tabel_member = new javax.swing.JTable();
        idmember = new javax.swing.JTextField();
        nama_member = new javax.swing.JTextField();
        no_telp = new javax.swing.JTextField();
        jumlah_cuci = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btntransaksijual = new javax.swing.JButton();
        btndashboard = new javax.swing.JButton();
        btnsimpan = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        btnhapus = new javax.swing.JButton();
        btnlogout = new javax.swing.JButton();
        btnbarang = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabel_member.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id member", "Nama Member", "No telp", "Jumlah Pencucian"
            }
        ));
        tabel_member.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabel_memberMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabel_member);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 300, 790, 490));

        idmember.setFont(new java.awt.Font("Rockwell", 1, 12)); // NOI18N
        getContentPane().add(idmember, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, 200, 30));

        nama_member.setFont(new java.awt.Font("Rockwell", 1, 12)); // NOI18N
        getContentPane().add(nama_member, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 370, 200, 30));

        no_telp.setFont(new java.awt.Font("Rockwell", 1, 12)); // NOI18N
        getContentPane().add(no_telp, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 440, 200, 30));

        jumlah_cuci.setFont(new java.awt.Font("Rockwell", 1, 12)); // NOI18N
        getContentPane().add(jumlah_cuci, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 500, 200, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon("A:\\Tugas\\Kelompok 3\\Super Fix\\1920x1080(1)\\sistem member k.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 1080));

        btntransaksijual.setText("jButton1");
        btntransaksijual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntransaksijualActionPerformed(evt);
            }
        });
        getContentPane().add(btntransaksijual, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 160, 100));

        btndashboard.setText("jButton1");
        btndashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndashboardActionPerformed(evt);
            }
        });
        getContentPane().add(btndashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 160, 100));

        btnsimpan.setText("jButton1");
        btnsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsimpanActionPerformed(evt);
            }
        });
        getContentPane().add(btnsimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 680, 240, 70));

        btnupdate.setText("jButton1");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnupdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 820, 250, 70));

        btnhapus.setText("jButton1");
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });
        getContentPane().add(btnhapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 810, 250, 80));

        btnlogout.setText("jButton1");
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });
        getContentPane().add(btnlogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1750, 20, 160, 100));

        btnbarang.setText("jButton1");
        btnbarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbarangActionPerformed(evt);
            }
        });
        getContentPane().add(btnbarang, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 150, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void loadmember() {
        DefaultTableModel model = (DefaultTableModel) tabel_member.getModel();
        model.setRowCount(0);
        
        try {
            Connection conn = koneksi.koneksiDB();
            // Change the SQL query to target the correct table
            String sql = "SELECT * FROM member";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
          
            while (rs.next()) {
                String id = rs.getString("id_member");
                String nama = rs.getString("Nama");
                String noHP = rs.getString("No_Handphone");
                String jumlahCuci = rs.getString("jumlah_pencucian");
                
                // Add row to table
                model.addRow(new Object[]{id, nama, noHP, jumlahCuci});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage());
        }
    }
    
    // Method to load data for a specific member by ID
    private void loadDataByKode(String kode) {
        try {
            String sql = "SELECT * FROM member WHERE id_member = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, kode);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                idmember.setText(rs.getString("id_member"));
                nama_member.setText(rs.getString("Nama"));
                no_telp.setText(rs.getString("No_Handphone"));
                jumlah_cuci.setText(rs.getString("jumlah_pencucian"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    // Method to clear input fields
    private void clearFields() {
        idmember.setText("");
        nama_member.setText("");
        no_telp.setText("");
        jumlah_cuci.setText("");
        idmember.requestFocus();
    }
    private void btntransaksijualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntransaksijualActionPerformed
        TR_Jual_Karyawan trk = new TR_Jual_Karyawan();
        trk.setVisible(true);
    }//GEN-LAST:event_btntransaksijualActionPerformed

    private void btndashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndashboardActionPerformed
       Dashboard_Karyawan dk = new Dashboard_Karyawan();
        dk.setVisible(true);
    }//GEN-LAST:event_btndashboardActionPerformed

    private void btnsimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsimpanActionPerformed
          String idMember = idmember.getText().trim();
        String nama = nama_member.getText().trim();
        String noHP = no_telp.getText().trim();
        String jumlahCuci = jumlah_cuci.getText().trim();
        
        // Validate input
        if (idMember.isEmpty() || nama.isEmpty() || noHP.isEmpty() || jumlahCuci.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
            return;
        }
        
        try {
            // Check if ID already exists
            String checkSql = "SELECT * FROM member WHERE id_member = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSql);
            checkStmt.setString(1, idMember);
            ResultSet checkRs = checkStmt.executeQuery();
            
            if (checkRs.next()) {
                JOptionPane.showMessageDialog(this, "ID Member sudah ada. Gunakan ID lain atau gunakan tombol Update.");
                return;
            }
            
            // Insert new member
            String sql = "INSERT INTO member (id_member, Nama, No_Handphone, jumlah_pencucian) VALUES (?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, idMember);
            pstmt.setString(2, nama);
            pstmt.setString(3, noHP);
            pstmt.setString(4, jumlahCuci);
            
            int rowsAffected = pstmt.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
                loadmember(); // Refresh table
                clearFields(); // Clear input fields
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan data!");
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnsimpanActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
         String idMember = idmember.getText().trim();
        String nama = nama_member.getText().trim();
        String noHP = no_telp.getText().trim();
        String jumlahCuci = jumlah_cuci.getText().trim();
        
        // Validate input
        if (idMember.isEmpty() || nama.isEmpty() || noHP.isEmpty() || jumlahCuci.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
            return;
        }
        
        try {
            // Check if ID exists
            String checkSql = "SELECT * FROM member WHERE id_member = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSql);
            checkStmt.setString(1, idMember);
            ResultSet checkRs = checkStmt.executeQuery();
            
            if (!checkRs.next()) {
                JOptionPane.showMessageDialog(this, "ID Member tidak ditemukan. Gunakan tombol Simpan untuk data baru.");
                return;
            }
            
            // Update existing member
            String sql = "UPDATE member SET Nama = ?, No_Handphone = ?, jumlah_pencucian = ? WHERE id_member = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, nama);
            pstmt.setString(2, noHP);
            pstmt.setString(3, jumlahCuci);
            pstmt.setString(4, idMember);
            
            int rowsAffected = pstmt.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
                loadmember(); // Refresh table
                clearFields(); // Clear input fields
            } else {
                JOptionPane.showMessageDialog(this, "Gagal mengupdate data!");
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnupdateActionPerformed

    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
         String idMember = idmember.getText().trim();
 
        if (idMember.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus!");
            return;
        }
        
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, 
                "Apakah anda yakin ingin menghapus data ini?", 
                "Konfirmasi Hapus", 
                JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        try {
            // Delete member
            String sql = "DELETE FROM member WHERE id_member = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, idMember);
            
            int rowsAffected = pstmt.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                loadmember(); // Refresh table
                clearFields(); // Clear input fields
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data!");
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnhapusActionPerformed

    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlogoutActionPerformed
       int pilihan = JOptionPane.showConfirmDialog(this, 
            "Apakah anda yakin ingin logout?",
            "Konfirmasi Logout",
            JOptionPane.YES_NO_OPTION);
            
    if (pilihan == JOptionPane.YES_OPTION) {
        this.dispose();
        
        Login_New loginFrame = new Login_New();
        loginFrame.setVisible(true);
    }
    }//GEN-LAST:event_btnlogoutActionPerformed

    private void btnbarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbarangActionPerformed
        Barang_Karyawan_New bk = new Barang_Karyawan_New();
        bk.setVisible(true);
    }//GEN-LAST:event_btnbarangActionPerformed

    private void tabel_memberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabel_memberMouseClicked
        int row = tabel_member.getSelectedRow();
        if (row >= 0) {
            String kode = tabel_member.getValueAt(row, 0).toString();
            loadDataByKode(kode);
        }

    }//GEN-LAST:event_tabel_memberMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Member_Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Member_Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Member_Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Member_Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Member_Karyawan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbarang;
    private javax.swing.JButton btndashboard;
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton btnsimpan;
    private javax.swing.JButton btntransaksijual;
    private javax.swing.JButton btnupdate;
    private javax.swing.JTextField idmember;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jumlah_cuci;
    private javax.swing.JTextField nama_member;
    private javax.swing.JTextField no_telp;
    private javax.swing.JTable tabel_member;
    // End of variables declaration//GEN-END:variables
}
